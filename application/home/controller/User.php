<?php

namespace app\home\controller;

use app\common\model\Order;
use think\Controller;
use app\common\model\User as UserModel;
use app\common\model\Category;
use think\Cookie;
use think\Session;
use think\Db;
use think\Loader;

class User extends Controller
{
    private $categoryData;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub


        // 调取分类数据
        // 获取后台分类表数据
        $this->categoryData = (new Category())->where('pid',0)->select();
    }

    /**
     *  前台用户登陆
     */
    public function login(){

        if (request()->isPost()){
            $res = (new UserModel())->login(input('post.'));
            if ($res['valid']){
                $this->success($res['msg'],'/');
            }else{
                $this->error($res['msg']);
            }
            // 验证用户数据
        }

        $categoryData = $this->categoryData;
        return view('',compact('categoryData'));
    }

    /**
     * Notes:绑定信息
     * User: 'JS_chen'
     * Date: 2018/6/23
     * Time: 22:32
     * @return \think\response\View
     */
    public function bindInfo()
    {
        if(request()->isPost())
        {
            $validate = Loader::validate('User');
            if(!$validate->scene('bind')->check(request()->post()))
            {
                $this->error($validate->getError());
            }else{
                //判断手机号码或是否已注册，有就绑定到已有的
                $isReg = Db::name('user')->where('phone',request()->post('phone'))->whereOr('email',request()->post('email'))->find();
                if($isReg)
                {
                    Db::name('openuser')->where('openid',session('openid'))->update(['uid'=>$isReg['uid']]);
                    session('user.user_id',$isReg['uid']);
                    //$this->redirect('/');
                    $this->success('绑定成功','/');
                }
                //没有就新建用户
                $data = [
                    'username'=>session('user.user_username'),
                    'phone'=>request()->post('phone'),
                    'email'=>request()->post('email'),
                    'password'=>md5(request()->post('password'))
                ];
                $user = Db::name('user')->insert($data);
                Db::name('openuser')->where('openid',session('openid'))->update(['uid'=>$user['uid']]);
                session('user.user_id',$user['uid']);
                $this->success('绑定成功','/');
            }
        }
        $categoryData = $this->categoryData;
        return view('',compact('categoryData'));
    }

    /**
     * 前台用户退出
     */
    public function logout(){
        // 清除session（当前作用域）
        session(null);
        // 删除cookie
        Cookie::delete('PHPSESSID');

        $this->success('退出成功','/');

    }

    /**
     *  用户注册
     */
    public function register(){
        if(request()->isPost()){
            // 接受用户数据
            $res = (new UserModel())->userRegister(input('post.'));
            if ($res['valid']){
                $this->success($res['msg'],'/login.html');
            }else{
                $this->error($res['msg']);
            }
        }
        $categoryData = $this->categoryData;
        return view('',compact('categoryData'));
    }

    /**
     *  用户修改密码
     */
    public function changePassword(){
        if(!Session::get('user.user_id')){
            $this->error('请先登陆','/login.html');
        }
        if(request()->isPost()){
            $res = (new  UserModel())->changePassword(input('post.'));
            if(!$res['valid']){
                $this->error($res['msg']);
            }else{
                $this->success($res['msg']);
            }
        }
        $categoryData = $this->categoryData;
        return view('',compact('categoryData'));
    }

    /**
     *  个人中心
     */
    public function user(){

        if(!Session::get('user.user_id')){
            $this->error('请先登陆','/login.html');
        }

        if(request()->isPost()){
            // 验证用户信息 进行存入数据库
            $res = (new UserModel())->userInfo(input('post.'));
            // 如果有问题 给用户提示信息 返回原页面
            if (!$res['valid']){
                $this->error($res['msg']);
            }
        }
        // 获取用户信息
        $userInfo = UserModel::get(Session::get('user.user_id'));
        $categoryData = $this->categoryData;
        return view('',compact('categoryData','userInfo'));
    }

    /**
     * 保存用户地址
     *
     */
    public function address(){

        if(!Session::get('user.user_id')){
            $this->error('请先登陆','/login.html');
        }

        $model = UserModel::get(Session::get('user.user_id'));
        if(request()->isPost()){
            $info = input();
            $name = $info["name"];
            $phone = $info["phone"];
            unset($info["name"]);
            unset($info["phone"]);
            $address = json_encode($info,JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES);
            $res = $model->assAddr()->save(['name'=>$name,'phone'=>$phone,'address'=>$address]);
            if ($res){
                $this->success('添加成功');
            }else{
                $this->error('添加失败');
            }
        }
        // 获取地址栏信息
        $address = $model->assAddr()->select();
        if($address){
           foreach ($address as $k =>$v){
               $v = $v->toArray();
               $v['address'] = json_decode($v['address'],true);
               $address[$k] = $v;

           }
        }

        $categoryData = $this->categoryData;
//        var_dump($address);
        return view('',compact('categoryData','address'));
    }

    public function orderList(){

        if(!Session::get('user.user_id')){
            $this->error('请先登陆','/login.html');
        }

        // 从 order 表中取出 订单信息
        $orderInfo = Order::where('user_id',Session::get('user.user_id'))->select();
        $orderGoods = array();
        foreach ($orderInfo as $k=>$v)
        {
            $goods_id = explode(',',$v["goods_id"]);
            $goods_name = '';
            foreach ($goods_id as $value) {
                $good = Db::name('goods')->where('gid',$value)->field('gname')->find();
                if($goods_name == '')
                {
                    $goods_name = $good['gname'];
                }else{
                    $goods_name = $goods_name.';'.$good['gname'];
                }
            }
            array_push($orderGoods,$goods_name);
        }
//        var_dump($orderInfo);
        $categoryData = $this->categoryData;
        return view('',compact('categoryData','orderInfo','orderGoods'));
    }

    /**
     * 删除订单
     * 只能删除 未发货 或者已完成的订单
     */
    public function orderDel(){
        $oid = input('oid');
        $model = Order::get($oid);
        if($model['status'] == '未支付' || $model['status']=='已签收'){
            $res = $model->delete();
            if($res){
                $this->success('删除订单成功');
            }else{
                $this->error('删除订单失败');
            }
        }else{
            $this->error('货物正在路中，不能删除');
        }
    }
}
